// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

// users role
enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

// basic user details
model User {
  id           String         @id @default(uuid())
  email        String         @unique
  name         String
  role         Role           @default(SUBACCOUNT_USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  permission   Permissions[]
  Agency       Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  agencyId     String?
  Ticket       Ticket[]
  Motification Notification[]
  avatar       String

  @@index([agencyId])
}

// permissions to user(identify with email) base on subaccounts 
model Permissions {
  id           String     @id @default(uuid())
  email        String     @unique
  User         User       @relation(fields: [email], references: [email], onDelete: Cascade)
  subAccountId String
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  access       Boolean

  @@index([subAccountId])
  @@index([email])
}

// customer :-> User who pay for Agency
//@db.Text tells Prisma to store this as a TEXT column in SQL, instead of the default VARCHAR(191)
model Agency {
  id                  String                @id @default(uuid())
  connectAccountId    String?               @default("")
  customerId          String?               @default("")
  // agencyEmail basic details
  agencyEmail         String
  agencyPhone         String
  name                String
  agencyLogo          String                @db.Text
  address             String
  city                String
  state               String
  contry              String
  zipcode             String
  // all user to agency
  User                User[]
  goal                Int                   @default(5)
  // all subaccount to agency
  SubAccount          SubAccount[]
  // send Invitation to other accounts
  Invitation          Invitation[]
  Notification        Notification[]
  Subscription        Subscription?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  // which option show in sidebar for agency
  AgencySidebarOption AgencySidebarOption[]
  // Extra paid features that an agency can add.
  AddOns              AddOns[]
  whiteLabel          Boolean               @default(true)
}

model SubAccount {
  id               String                    @id @default(uuid())
  connectAccountId String?                   @default("")
  // each subaccount name and basic details
  name             String
  subAccountLogo   String                    @db.Text
  agencyEmail      String
  agencyLogo       String                    @db.Text
  address          String
  city             String
  state            String
  contry           String
  zipcode          String
  goal             Int                       @default(5)
  agencyId         String
  Agency           Agency                    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  // which option show in sidebar for sub account
  SidebarOption    SubAccountSidebarOption[]
  Permissions      Permissions[]
  // website  to subaccount
  Funnels          Funnel[]
  // Images, videos, or files uploaded and linked to a subaccount
  Media            Media[]
  Contact          Contact[]
  // which trigger need and which automation need to do
  Trigger          Trigger[]
  Automation       Automation[]
  // all pipeline and tags
  Pipeline         Pipeline[]
  Tags             Tag[]
  Notification     Notification[]
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt

  @@index([agencyId])
}

// applied to ticket
model Tag {
  id           String     @id @default(uuid())
  // label of tag ex:- Urgent ,Bug etc
  name         String
  // give colour to each ticket ex:- red -> Bug  etc
  color        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  // each tag is scoped to a specific SubAccount 
  subAccountId String
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  // each tags applied to multiple ticket
  Ticket       Ticket[]

  @@index([subAccountId])
}

// Project Management and pipelines 

// Pipeline → Lane → Ticket
// A Kanban-style workflow system:
// Pipeline: The overall board.
// Lane: Columns within the board (e.g., To-do, In Progress).
// Ticket: Tasks or items within each lane.
model Pipeline {
  id           String     @id @default(uuid())
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  // which lane pressent in pipeline
  Lane         Lane[]
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId String

  @@index([subAccountId])
}

model Lane {
  id         String   @id @default(uuid())
  // each lane has name ex:- In Process
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // which pipeline belong this
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String
  // each lane multiple ticket
  Tickets    Ticket[]
  order      Int      @default(0)

  @@index([pipelineId])
}

model Ticket {
  id             String   @id @default(uuid())
  // ticket name
  name           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  // which lane ticket belong
  laneId         String
  // oeder of ticket
  order          Int      @default(0)
  Lane           Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade)
  value          Decimal?
  description    String?
  Tags           Tag[]
  customerId     String?
  Customer       Contact? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  //ticket assigned user id
  assignedUserId String?
  Assigned       User?    @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

// A Trigger is something that starts an automation (e.g., a contact form is submitted).
// An Automation is a series of Actions (e.g., create a contact, send an email, move a ticket).
// An AutomationInstance represents an individual run of the automation.
// A Contact is the target entity often affected by automation (like a lead or user).
enum TriggerTypes {
  CONTACT_FORM
}

model Trigger {
  id           String       @id @default(uuid())
  name         String
  type         TriggerTypes
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  subAccountId String
  Subaccount   SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  // list of all automations that starts
  Automations  Automation[]

  @@index([subAccountId])
}

//  automation might create a contact and move a ticket when triggered.
model Automation {
  id                 String               @id @default(uuid())
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  // If false, automation is not active
  triggerId          String?
  published          Boolean              @default(false)
  // trigger that auto-start this automation
  Trigger            Trigger?             @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  subAccountId       String
  Subaccount         SubAccount           @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  // actions done by this automation
  Action             Action[]
  AutomationInstance AutomationInstance[]

  @@index([triggerId])
  @@index([subAccountId])
}

// Each time a trigger fires and an automation runs, a new instance logs it.
model AutomationInstance {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  // Is this instance still active?
  active       Boolean    @default(false)

  @@index([automationId])
}

enum ActionType {
  CREATE_CONTACT
}

model Action {
  id           String     @id @default(uuid())
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  order        Int
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  laneId       String     @default("0")

  @@index([automationId])
}

model Contact {
  id           String     @id @default(uuid())
  name         String
  email        String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  subAccountId String
  Subaccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket       Ticket[]

  @@index([subAccountId])
}

// media file that use in website
model Media {
  id           String     @id @default(uuid())
  // file type
  type         String?
  // file name
  name         String
  // file link
  link         String     @unique
  // which subaccount use or upload this
  subAccountId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Subaccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

// website that build
model Funnel {
  id            String       @id @default(uuid())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  published     Boolean      @default(false)
  // website subdomain
  subDomainName String?      @unique
  favicon       String?      @db.Text
  subAccountId  String
  SubAccount    SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  // website pages
  FunnelPages   FunnelPage[]
  liveProducts  String?      @default("[]")
  ClassName     ClassName[]

  @@index([subAccountId])
}

model ClassName {
  id         String   @id @default(uuid())
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  funnelId   String
  customData String?  @db.Text
  Funnel     Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model FunnelPage {
  id           String   @id @default(uuid())
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?  @db.Text
  order        Int
  previewImage String?  @db.Text
  funnelId     String
  Funnel       Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model AgencySidebarOption {
  id        String   @id @default(uuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  agencyId  String
  Agency    Agency?  @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
}

model SubAccountSidebarOption {
  id           String      @id @default(uuid())
  name         String      @default("Menu")
  link         String      @default("#")
  icon         Icon        @default(info)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId String?

  @@index([subAccountId])
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id       String           @id @default(uuid())
  email    String           @unique
  agencyId String
  Agency   Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  status   InvitationStatus @default(PENDING)
  role     Role             @default(SUBACCOUNT_USER)

  @@index([agencyId])
}

model Notification {
  id           String      @id @default(uuid())
  notification String
  agencyId     String
  subAccountId String?
  userId       String
  User         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency       Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([agencyId])
  @@index([subAccountId])
  @@index([userId])
}

enum Plan {
  price_1Ppo69RwpqMc2iheOHp2rbzA
  price_1Ppo73RwpqMc2ihef4jfoTTc
}

model Subscription {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  plan                 Plan?
  price                String?
  active               Boolean  @default(false)
  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique

  agencyId String? @unique
  Agency   Agency? @relation(fields: [agencyId], references: [id])

  @@index([customerId])
}

model AddOns {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  active    Boolean  @default(false)
  priceId   String   @unique
  agencyId  String?
  Agency    Agency?  @relation(fields: [agencyId], references: [id])

  @@index([agencyId])
}
